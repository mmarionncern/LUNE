#include "modules/NeuralNetTTLQ.hh"


ClassImp(NeuralNet)

void NeuralNet::Initialize()
{
   // build network structure
   fLayers = 3;
   fLayerSize[0] = 9; fWeights[0] = new double[9]; 
   fLayerSize[1] = 14; fWeights[1] = new double[14]; 
   fLayerSize[2] = 1; fWeights[2] = new double[1]; 
   // weight matrix from layer 0 to 1
   fWeightMatrix0to1[0][0] = -0.00835447428836853;
   fWeightMatrix0to1[1][0] = 1.50480347008607;
   fWeightMatrix0to1[2][0] = 0.902496122722397;
   fWeightMatrix0to1[3][0] = 0.636904382815183;
   fWeightMatrix0to1[4][0] = -1.55984735628247;
   fWeightMatrix0to1[5][0] = -1.47638078053705;
   fWeightMatrix0to1[6][0] = -0.873536044115101;
   fWeightMatrix0to1[7][0] = 1.68031936703309;
   fWeightMatrix0to1[8][0] = -1.2884998962076;
   fWeightMatrix0to1[9][0] = -1.16479206580586;
   fWeightMatrix0to1[10][0] = -1.5679474567749;
   fWeightMatrix0to1[11][0] = -1.27507161734661;
   fWeightMatrix0to1[12][0] = -1.53780043591631;
   fWeightMatrix0to1[0][1] = -0.471381370105411;
   fWeightMatrix0to1[1][1] = 0.206724891252709;
   fWeightMatrix0to1[2][1] = 0.687542428999463;
   fWeightMatrix0to1[3][1] = -0.656459799523861;
   fWeightMatrix0to1[4][1] = 1.87034489631454;
   fWeightMatrix0to1[5][1] = 0.16634772398105;
   fWeightMatrix0to1[6][1] = 1.19536770089926;
   fWeightMatrix0to1[7][1] = -0.815775505830226;
   fWeightMatrix0to1[8][1] = -0.817419191176522;
   fWeightMatrix0to1[9][1] = 0.70696362363936;
   fWeightMatrix0to1[10][1] = 0.137642914374309;
   fWeightMatrix0to1[11][1] = -1.7100263144092;
   fWeightMatrix0to1[12][1] = -0.735688100341535;
   fWeightMatrix0to1[0][2] = 1.35053986413375;
   fWeightMatrix0to1[1][2] = 1.04935897172119;
   fWeightMatrix0to1[2][2] = -1.94806207621727;
   fWeightMatrix0to1[3][2] = 0.165075412946179;
   fWeightMatrix0to1[4][2] = 0.921244633509461;
   fWeightMatrix0to1[5][2] = 1.65891933233352;
   fWeightMatrix0to1[6][2] = -0.636374144333614;
   fWeightMatrix0to1[7][2] = 0.591993947644872;
   fWeightMatrix0to1[8][2] = 0.330219928944836;
   fWeightMatrix0to1[9][2] = -0.315590060891577;
   fWeightMatrix0to1[10][2] = -1.33998067391122;
   fWeightMatrix0to1[11][2] = 1.10720052824292;
   fWeightMatrix0to1[12][2] = -1.40001557667194;
   fWeightMatrix0to1[0][3] = 1.22746449633787;
   fWeightMatrix0to1[1][3] = 2.1464494816788;
   fWeightMatrix0to1[2][3] = 0.816217579643993;
   fWeightMatrix0to1[3][3] = 1.36136144901898;
   fWeightMatrix0to1[4][3] = 1.28551315901529;
   fWeightMatrix0to1[5][3] = -0.743448023539143;
   fWeightMatrix0to1[6][3] = -1.54425190445565;
   fWeightMatrix0to1[7][3] = 0.354462260077538;
   fWeightMatrix0to1[8][3] = 0.00311621711092912;
   fWeightMatrix0to1[9][3] = 1.30128133716534;
   fWeightMatrix0to1[10][3] = 1.30744602630017;
   fWeightMatrix0to1[11][3] = 1.01126069594992;
   fWeightMatrix0to1[12][3] = 1.07164067376782;
   fWeightMatrix0to1[0][4] = -1.16406093832211;
   fWeightMatrix0to1[1][4] = -0.704689168551715;
   fWeightMatrix0to1[2][4] = -1.57756829085066;
   fWeightMatrix0to1[3][4] = -0.253011065235978;
   fWeightMatrix0to1[4][4] = -1.86248667120346;
   fWeightMatrix0to1[5][4] = -1.72408777188478;
   fWeightMatrix0to1[6][4] = 1.19476852703646;
   fWeightMatrix0to1[7][4] = 0.623846464430321;
   fWeightMatrix0to1[8][4] = -1.74158728147337;
   fWeightMatrix0to1[9][4] = 0.506047695378353;
   fWeightMatrix0to1[10][4] = -0.282548375047405;
   fWeightMatrix0to1[11][4] = 0.446418728031293;
   fWeightMatrix0to1[12][4] = 1.12677643984543;
   fWeightMatrix0to1[0][5] = -0.0606441266732608;
   fWeightMatrix0to1[1][5] = 1.97198147271751;
   fWeightMatrix0to1[2][5] = -1.16178704103763;
   fWeightMatrix0to1[3][5] = 1.08360883482984;
   fWeightMatrix0to1[4][5] = 0.723463384383044;
   fWeightMatrix0to1[5][5] = -0.752822455715939;
   fWeightMatrix0to1[6][5] = -1.0719315928585;
   fWeightMatrix0to1[7][5] = 1.23888902272239;
   fWeightMatrix0to1[8][5] = 0.840101678119924;
   fWeightMatrix0to1[9][5] = 1.20327194232255;
   fWeightMatrix0to1[10][5] = -0.285102328785919;
   fWeightMatrix0to1[11][5] = -1.95015286753674;
   fWeightMatrix0to1[12][5] = -1.91850083784499;
   fWeightMatrix0to1[0][6] = 1.22798171940092;
   fWeightMatrix0to1[1][6] = 0.16329183883417;
   fWeightMatrix0to1[2][6] = 1.71846158978414;
   fWeightMatrix0to1[3][6] = 0.847718407712899;
   fWeightMatrix0to1[4][6] = 0.764285859981156;
   fWeightMatrix0to1[5][6] = -0.766950353987529;
   fWeightMatrix0to1[6][6] = -0.135257053285199;
   fWeightMatrix0to1[7][6] = 0.143378154785402;
   fWeightMatrix0to1[8][6] = 0.897682700591188;
   fWeightMatrix0to1[9][6] = -0.888659196163833;
   fWeightMatrix0to1[10][6] = -1.3946067346898;
   fWeightMatrix0to1[11][6] = -1.09649031032017;
   fWeightMatrix0to1[12][6] = -0.314085762879096;
   fWeightMatrix0to1[0][7] = 0.12894507988533;
   fWeightMatrix0to1[1][7] = 1.5384303272826;
   fWeightMatrix0to1[2][7] = -1.66205500407953;
   fWeightMatrix0to1[3][7] = -0.803229581820774;
   fWeightMatrix0to1[4][7] = 1.25437119178797;
   fWeightMatrix0to1[5][7] = -0.872346127097126;
   fWeightMatrix0to1[6][7] = -1.46842881167177;
   fWeightMatrix0to1[7][7] = -0.516128857770444;
   fWeightMatrix0to1[8][7] = 0.376343511267906;
   fWeightMatrix0to1[9][7] = -2.08457126317228;
   fWeightMatrix0to1[10][7] = -1.98341363579434;
   fWeightMatrix0to1[11][7] = 0.322218249497627;
   fWeightMatrix0to1[12][7] = 1.70498922831953;
   fWeightMatrix0to1[0][8] = -1.67597272892061;
   fWeightMatrix0to1[1][8] = 5.36530252054894;
   fWeightMatrix0to1[2][8] = -1.11335503051097;
   fWeightMatrix0to1[3][8] = -0.915140741441002;
   fWeightMatrix0to1[4][8] = 1.6227297517874;
   fWeightMatrix0to1[5][8] = 0.318735447514742;
   fWeightMatrix0to1[6][8] = -2.12103891909294;
   fWeightMatrix0to1[7][8] = 0.96547326330506;
   fWeightMatrix0to1[8][8] = 0.751222708821909;
   fWeightMatrix0to1[9][8] = 0.58453585370435;
   fWeightMatrix0to1[10][8] = -1.71790434503684;
   fWeightMatrix0to1[11][8] = 2.44195323119974;
   fWeightMatrix0to1[12][8] = 0.875711547284866;
   // weight matrix from layer 1 to 2
   fWeightMatrix1to2[0][0] = 0.046020963201017;
   fWeightMatrix1to2[0][1] = 0.824008426065816;
   fWeightMatrix1to2[0][2] = 0.0218368287001422;
   fWeightMatrix1to2[0][3] = -0.804117433158557;
   fWeightMatrix1to2[0][4] = 0.0764491218317095;
   fWeightMatrix1to2[0][5] = 0.0268606758506819;
   fWeightMatrix1to2[0][6] = 0.381715220991003;
   fWeightMatrix1to2[0][7] = 0.25447341856533;
   fWeightMatrix1to2[0][8] = 0.212687908702823;
   fWeightMatrix1to2[0][9] = -0.0466395047588615;
   fWeightMatrix1to2[0][10] = 0.10869414374028;
   fWeightMatrix1to2[0][11] = -0.855136323244966;
   fWeightMatrix1to2[0][12] = 0.214780643206138;
   fWeightMatrix1to2[0][13] = 0.377952408553276;
}

double NeuralNet::GetMvaValue__( const std::vector<double>& inputValues ) const
{
   if (inputValues.size() != (unsigned int)fLayerSize[0]-1) {
      std::cout << "Input vector needs to be of size " << fLayerSize[0]-1 << std::endl;
      return 0;
   }

   for (int l=0; l<fLayers; l++)
      for (int i=0; i<fLayerSize[l]; i++) fWeights[l][i]=0;

   for (int l=0; l<fLayers-1; l++)
      fWeights[l][fLayerSize[l]-1]=1;

   for (int i=0; i<fLayerSize[0]-1; i++)
      fWeights[0][i]=inputValues[i];

   // layer 0 to 1
   for (int o=0; o<fLayerSize[1]-1; o++) {
      for (int i=0; i<fLayerSize[0]; i++) {
         double inputVal = fWeightMatrix0to1[o][i] * fWeights[0][i];
         fWeights[1][o] += inputVal;
      }
      fWeights[1][o] = ActivationFnc(fWeights[1][o]);
   }
   // layer 1 to 2
   for (int o=0; o<fLayerSize[2]; o++) {
      for (int i=0; i<fLayerSize[1]; i++) {
         double inputVal = fWeightMatrix1to2[o][i] * fWeights[1][i];
         fWeights[2][o] += inputVal;
      }
      fWeights[2][o] = OutputActivationFnc(fWeights[2][o]);
   }

   return fWeights[2][0];
}

double NeuralNet::ActivationFnc(double x) const {
   // hyperbolic tan
   return tanh(x);
}
double NeuralNet::OutputActivationFnc(double x) const {
   // identity
   return x;
}
   
// Clean up
void NeuralNet::Clear() 
{
   // nothing to clear
}
   double NeuralNet::GetMvaValue( const std::vector<double>& inputValues ) const
   {
      // classifier response value
      double retval = 0;

      // classifier response, sanity check first
      if (!IsStatusClean()) {
         std::cout << "Problem in class \"" << fClassName << "\": cannot return classifier response"
                   << " because status is dirty" << std::endl;
         retval = 0;
      }
      else {
         if (IsNormalised()) {
            // normalise variables
            std::vector<double> iV;
            int ivar = 0;
            for (std::vector<double>::const_iterator varIt = inputValues.begin();
                 varIt != inputValues.end(); varIt++, ivar++) {
               iV.push_back(NormVariable( *varIt, fVmin[ivar], fVmax[ivar] ));
            }
            Transform( iV, -1 );
            retval = GetMvaValue__( iV );
         }
         else {
            std::vector<double> iV;
            int ivar = 0;
            for (std::vector<double>::const_iterator varIt = inputValues.begin();
                 varIt != inputValues.end(); varIt++, ivar++) {
               iV.push_back(*varIt);
            }
            Transform( iV, -1 );
            retval = GetMvaValue__( iV );
         }
      }

      return retval;
   }

//_______________________________________________________________________
void NeuralNet::InitTransform_1()
{
   // Normalization transformation, initialisation
   fMin_1[0][0] = 30.1995506287;
   fMax_1[0][0] = 680.760498047;
   fMin_1[1][0] = 30.0017776489;
   fMax_1[1][0] = 353.145111084;
   fMin_1[2][0] = 30.0017776489;
   fMax_1[2][0] = 680.760498047;
   fMin_1[0][1] = 30.9244670868;
   fMax_1[0][1] = 1169.95349121;
   fMin_1[1][1] = 30.0019454956;
   fMax_1[1][1] = 272.886535645;
   fMin_1[2][1] = 30.0019454956;
   fMax_1[2][1] = 1169.95349121;
   fMin_1[0][2] = 62.7955703735;
   fMax_1[0][2] = 1722.10266113;
   fMin_1[1][2] = 21.1928577423;
   fMax_1[1][2] = 1346.10180664;
   fMin_1[2][2] = 21.1928577423;
   fMax_1[2][2] = 1722.10266113;
   fMin_1[0][3] = 69.8637390137;
   fMax_1[0][3] = 1998.47119141;
   fMin_1[1][3] = 28.8981246948;
   fMax_1[1][3] = 696.73425293;
   fMin_1[2][3] = 28.8981246948;
   fMax_1[2][3] = 1998.47119141;
   fMin_1[0][4] = 0.0646460130811;
   fMax_1[0][4] = 779.743408203;
   fMin_1[1][4] = 0.0311075374484;
   fMax_1[1][4] = 510.023986816;
   fMin_1[2][4] = 0.0311075374484;
   fMax_1[2][4] = 779.743408203;
   fMin_1[0][5] = 1.06293094158;
   fMax_1[0][5] = 1762.92504883;
   fMin_1[1][5] = 0;
   fMax_1[1][5] = 744.35357666;
   fMin_1[2][5] = 0;
   fMax_1[2][5] = 1762.92504883;
   fMin_1[0][6] = -3.10384058952;
   fMax_1[0][6] = 3.00050234795;
   fMin_1[1][6] = -3.14048290253;
   fMax_1[1][6] = 3.13704562187;
   fMin_1[2][6] = -3.14048290253;
   fMax_1[2][6] = 3.13704562187;
   fMin_1[0][7] = 94.6028671265;
   fMax_1[0][7] = 1147.47229004;
   fMin_1[1][7] = 30.7588100433;
   fMax_1[1][7] = 685.584228516;
   fMin_1[2][7] = 30.7588100433;
   fMax_1[2][7] = 1147.47229004;
}

//_______________________________________________________________________
void NeuralNet::Transform_1( std::vector<double>& iv, int cls) const
{
   // Normalization transformation
   if (cls < 0 || cls > 2) {
   if (2 > 1 ) cls = 2;
      else cls = 2;
   }
   const int nVar = 8;

   // get indices of used variables

   // define the indices of the variables which are transformed by this transformation
   std::vector<int> indicesGet;
   std::vector<int> indicesPut;

   indicesGet.push_back( 0);
   indicesGet.push_back( 1);
   indicesGet.push_back( 2);
   indicesGet.push_back( 3);
   indicesGet.push_back( 4);
   indicesGet.push_back( 5);
   indicesGet.push_back( 6);
   indicesGet.push_back( 7);
   indicesPut.push_back( 0);
   indicesPut.push_back( 1);
   indicesPut.push_back( 2);
   indicesPut.push_back( 3);
   indicesPut.push_back( 4);
   indicesPut.push_back( 5);
   indicesPut.push_back( 6);
   indicesPut.push_back( 7);

   std::vector<double> dv(nVar);
   for (int ivar=0; ivar<nVar; ivar++) dv[ivar] = iv[indicesGet.at(ivar)];
   for (int ivar=0;ivar<8;ivar++) {
      double offset = fMin_1[cls][ivar];
      double scale  = 1.0/(fMax_1[cls][ivar]-fMin_1[cls][ivar]);
      iv[indicesPut.at(ivar)] = (dv[ivar]-offset)*scale * 2 - 1;
   }
}

//_______________________________________________________________________
void NeuralNet::InitTransform()
{
   InitTransform_1();
}

//_______________________________________________________________________
void NeuralNet::Transform( std::vector<double>& iv, int sigOrBgd ) const
{
   Transform_1( iv, sigOrBgd );
}
